{"version":3,"file":"static/js/934.9c12a32d.chunk.js","mappings":"gOAUe,SAASA,EAAT,GAAkE,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,eAAgBC,EAAS,EAATA,MAErE,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAGA,GAAoCJ,EAAAA,EAAAA,UAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,MAEAC,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAYH,EAAaR,EAC/BK,EAAgBH,EAAMU,MAAMJ,EAAYG,IACxCJ,EAAaM,KAAKC,KAAKZ,EAAMa,OAASf,MACrC,CAACQ,EAAYR,EAAcE,IAQ9B,OACE,iCAEE,SAAC,IAAD,CACEc,WAAW,MACXC,WAAW,SAAC,MAAD,IACXC,aAXkB,SAACC,GACvB,IAAMC,EAAaD,EAAME,SAAWrB,EAAgBE,EAAMa,OAC1DN,EAAcW,IAUVE,mBAAoB,EACpBhB,UAAWA,EACXiB,eAAe,SAAC,MAAD,IACfC,sBAAuB,KACvBC,mBAAmB,aACnBC,gBAAgB,oBAChBC,sBAAsB,mBACtBC,kBAAkB,sBAGpB,mBAEA,SAAC3B,EAAD,CAAgBG,aAAcA,S,oJCxCrB,SAASyB,IAEpB,OAA0B1B,EAAAA,EAAAA,UAAS,IAAnC,eAAO2B,EAAP,KAAcC,EAAd,KAEA,GAA8B5B,EAAAA,EAAAA,WAAS,GAAvC,eAAO6B,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAvB,EAAAA,EAAAA,YAAU,WAENuB,GAAW,IAEXC,EAAAA,EAAAA,MACKC,MAAK,SAAAC,GACFL,EAASK,EAAIN,OACbG,GAAW,QAEpB,KAgBC,0BACI,UAAC,IAAD,YAGI,gBAAKI,UAAU,aAAf,UACI,+CAGJ,kBAEEL,GAEE,SAAC,IAAD,KAEA,SAAC,IAAD,CAAgBhC,aAAc,IAAKC,eA5BnD,YAAkC,IAAjBG,EAAgB,EAAhBA,aACb,OACI,+BACI,eAAIiC,UAAU,mBAAd,SACCjC,GACGA,EAAakC,KAAI,SAACC,GAAD,OACb,+BAAsC,SAAC,KAAD,CAAMC,GAAI,UAAYD,EAAKE,sBAA3B,SAAmDF,EAAKG,4BAArFH,EAAKE,+BAsBwCvC,MAAO4B","sources":["components/Pagination.js","pages/DrugsList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactPaginate from 'react-paginate';\n\nimport { BsArrowLeft, BsArrowRight } from 'react-icons/bs'\n\nimport \"./css/pagination.css\"\n\n// Example items, to simulate fetching from another resources.\n\n\nexport default function PaginatedItems({ itemsPerPage, ItemsComponent, items }) {\n  // We start with an empty list of items.\n  const [currentItems, setCurrentItems] = useState(null);\n  const [pageCount, setPageCount] = useState(0);\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  useEffect(() => {\n    // Fetch items from another resources.\n    const endOffset = itemOffset + itemsPerPage;\n    setCurrentItems(items.slice(itemOffset, endOffset));\n    setPageCount(Math.ceil(items.length / itemsPerPage));\n  }, [itemOffset, itemsPerPage, items]);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = (event) => {\n    const newOffset = (event.selected * itemsPerPage) % items.length;\n    setItemOffset(newOffset);\n  };\n\n  return (\n    <>\n\n      <ReactPaginate\n        breakLabel=\"...\"\n        nextLabel={<BsArrowRight/>}\n        onPageChange={handlePageClick}\n        pageRangeDisplayed={5}\n        pageCount={pageCount}\n        previousLabel={<BsArrowLeft/>}\n        renderOnZeroPageCount={null}\n        containerClassName=\"pagination\"\n        activeClassName=\"pagination-active\"\n        previousLinkClassName=\"pagination-arrow\"\n        nextLinkClassName=\"pagination-arrow\"\n      />\n\n      <br />\n   \n      <ItemsComponent currentItems={currentItems} />\n    </>\n  );\n}","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\n\nimport PaginatedItems from \"../components/Pagination\";\n\nimport { getAllDrugs } from \"../api/onsides\";\n\nimport Spinner from \"../components/Spinner\";\n\nexport default function DrugsList() {\n\n    const [drugs, setDrugs] = useState([]);\n\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n\n        setLoading(true);\n\n        getAllDrugs()\n            .then(res => {\n                setDrugs(res.drugs);\n                setLoading(false);\n            })\n    }, [])\n\n    function Items({ currentItems }) {\n        return (\n            <>\n                <ul className=\"pagination-items\">\n                {currentItems &&\n                    currentItems.map((item) => (\n                        <li key={item.ingredient_concept_id}> <Link to={\"/drugs/\" + item.ingredient_concept_id}>{item.ingredient_concept_name}</Link></li>\n                    ))}\n                </ul>\n            </>\n        );\n    }\n\n    return (\n        <div>\n            <Container>\n\n\n                <div className=\"home-title\">\n                    <h2> Drug Products </h2>\n                </div>\n\n                <br />\n\n                { loading ? \n\n                    <Spinner/> \n                    : \n                    <PaginatedItems itemsPerPage={100} ItemsComponent={Items} items={drugs} />\n\n                }\n\n            </Container>\n        </div>\n    )\n}"],"names":["PaginatedItems","itemsPerPage","ItemsComponent","items","useState","currentItems","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","useEffect","endOffset","slice","Math","ceil","length","breakLabel","nextLabel","onPageChange","event","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","containerClassName","activeClassName","previousLinkClassName","nextLinkClassName","DrugsList","drugs","setDrugs","loading","setLoading","getAllDrugs","then","res","className","map","item","to","ingredient_concept_id","ingredient_concept_name"],"sourceRoot":""}